// Generated by CoffeeScript 1.6.3
(function() {
  var async, s3;

  s3 = require('s3');

  async = require('async');

  module.exports = function(grunt) {
    var ENV, FileUpload, commit, fileName, gitFileName;
    ENV = process.env;
    commit = ENV.TRAVIS_COMMIT || (function() {
      throw new Error('set a TRAVIS_COMMIT env var');
    })();
    fileName = function(file) {
      return file.split('/')[1];
    };
    gitFileName = function(file, comm) {
      var baseName;
      if (comm == null) {
        comm = commit;
      }
      baseName = fileName(file).split('.')[0];
      baseName = "" + baseName + "-" + comm;
      return baseName + '.' + (file.split('.').slice(1)).join('');
    };
    FileUpload = (function() {
      function FileUpload(src, fileSuffix) {
        this.src = src;
        this.fileSuffix = fileSuffix != null ? fileSuffix : '';
        this.dest = this.fileSuffix ? gitFileName(this.src, this.fileSuffix) : gitFileName(this.src);
      }

      return FileUpload;

    })();
    return grunt.registerTask('ember-s3', function() {
      var client, config, done, file, files, upload, uploads;
      client = s3.createClient({
        key: ENV.AWS_ACCESS_KEY_ID,
        secret: ENV.AWS_SECRET_ACCESS_KEY,
        bucket: 'ember-test'
      });
      config = grunt.config('ember-s3');
      files = grunt.file.expand(config.files.src);
      if (!files.length) {
        return;
      }
      uploads = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push(new FileUpload(file));
        }
        return _results;
      })();
      uploads = uploads.concat((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          _results.push(new FileUpload(file, 'latest'));
        }
        return _results;
      })());
      done = this.async();
      upload = function(file, cb) {
        grunt.log.ok("uploading " + file.src + " to " + file.dest);
        upload = client.upload(file.src, file.dest);
        upload.on('error', function(err) {
          return cb(err);
        });
        return upload.on('end', function() {
          return cb();
        });
      };
      return async.eachSeries(uploads, upload, done);
    });
  };

}).call(this);
